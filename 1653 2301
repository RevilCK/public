import React, { useEffect, useRef } from 'react';
import * as echarts from 'echarts';

const GanttChart = ({ data }) => {
    const chartRef = useRef(null);

    const colorMapping = {
      1:"#FFFFFFF",
      2:"#F44336",
      3:"#F6BD16",
      4:"#B98700",
      5:"#633F00",
      6:"#5B8FF9",
      7:"#66BB6A",
  };

    useEffect(() => {
        let chart = null;

        if (chartRef.current) {
            chart = echarts.getInstanceByDom(chartRef.current) || echarts.init(chartRef.current);

            const categories = [];
            const series = [];
            let categoryIndex = 0;

            let startTime = null;
            let endTime = null;

            data.forEach((group) => {
              group.tasks.forEach((task) => {
                task.phases.forEach((phase) => {
                  const min = new Date(phase.start).getTime();
                  const max = new Date(phase.end).getTime();
                  if(!max || min < startTime){
                    startTime = min;
                  }
                  if (startTime || endTime > endTime){
                    endTime = max;
                  }
                });
              });
            });

            data.forEach((group) => {
                categories.push({ name: group.name, level: 0, isParent: true });

                group.tasks.forEach((task) => {
                    categories.push({ name: task.name, level: 1, isParent: false });
                });

                categoryIndex += 1 + group.tasks.length;
            });

            // Reverse the categories for the desired order
            categories.reverse();

            // Map original indices to reversed indices
            const categoryMap = new Map();
            categories.forEach((item, index) => {
                categoryMap.set(item.name, index);
            });

            // Rebuild the series with updated subCategoryIndex
            data.forEach((group) => {
                group.tasks.forEach((task) => {
                    const subCategoryIndex = categoryMap.get(task.name);

                    series.push({
                        type: 'custom',
                        name:'',
                        renderItem: (params, api) => {
                            const start = api.coord([api.value(1), subCategoryIndex]);
                            const end = api.coord([api.value(2), subCategoryIndex]);
                            const height = api.size([0, 1])[1] * 0.6;
                            const text = api.value(4)
                            const topHeight = height * 0.8;
                            const bottomHeight = height * 0.2;

                            return {
                                type:'group',
                                children:[{
                                    type: 'rect',
                                    shape: {
                                        x: start[0],
                                        y: start[1] - height / 2,
                                        width: end[0] - start[0],
                                        height: topHeight,
                                    },
                                    style: {
                                        // fill: api.value(3),
                                        fill: colorMapping[api.value(3)],,
                                        stroke: '#000',
                                        lineWidth: 1,
                                    },
                                },
                                {
                                    type: 'rect',
                                    shape: {
                                        x: start[0],
                                        y: start[1] - height / 2 + topHeight,
                                        width: end[0] - start[0],
                                        height: height,
                                    },
                                    style: {
                                        fill: "yellow",
                                        stroke: '#000',
                                        lineWidth: 1,
                                    },
                                },
                                {
                                    type: 'text',
                                    style: {
                                        x: (start[0] + end[0]) / 2,
                                        y: start[1],
                                        text: text || '',
                                        fill: '#FFF',
                                        textAlign: 'center',
                                        textVerticalAlign: 'middle',
                                        fontSize: 10,
                                        fontWeight: 'bold',
                                    },
                                }]} ;
                        },
                        encode: {
                            x: [1, 2],
                            y: 0,
                        },
                        data: task.phases.map((phase) => [
                            subCategoryIndex,
                            new Date(phase.start).getTime(),
                            new Date(phase.end).getTime(),
                            phase.color,
                            phase.text,
                        ]),
                    });

                    if (task.milestones) {
                        task.milestones.forEach((milestone) => {
                            series.push({
                                type: 'scatter',
                                data: [[subCategoryIndex, new Date(milestone.time).getTime()]],
                                symbol: 'circle',
                                symbolSize: 10,
                                itemStyle: { color: 'red' },
                            });
                        });
                    }
                });
            });

            const option = {
                tooltip: {
                    formatter: (params) => {
                        if (params.seriesType === 'scatter') {
                            return '';
                        }
                        const start = new Date(params.value[1]).toLocaleString();
                        const end = new Date(params.value[2]).toLocaleString();
                        return `${params.value[4]? params.value[4]:''}${params.seriesName}<br/>end: ${start}<br/>end: ${end}`;
                    },
                },
                grid: {
                    containLabel: true,
                    left: 150,
                    right: 50,
                    top: 50,
                    bottom: 10,
                },
                xAxis: {
                    type: 'time',
                    position: 'top',
                    min: startTime,
                    max: endTime,
                    axisLabel: {
                        formatter: '{HH}:{mm}',
                    },
                    splitLine: { show: true },
                },
                yAxis: {
                    type: 'category',
                    data: categories.map((item) =>
                        item.isParent
                            ? `{bold|${item.name}}                           `
                            : `${item.name}`
                    ),
                    axisLabel: {
                        align: 'right',
                        margin: 10,
                        rich: {
                            bold: { fontWeight: 'bold' },
                        },
                    },
                    splitLine: { show: false },
                },
                series: series,
            };
            chart.setOption(option);
            window.addEventListener('resize', () => chart.resize());

            return () => {
                chart.dispose();
            };
        }
    }, [data]);

    return <div ref={chartRef} style={{ width: '100%', height: '600px' }} />;
};

export default GanttChart;
